import { Autocomplete, Card, CardContent, CardHeader, Grid, Paper, TextField } from "@mui/material";
import { alpha } from '@mui/material/styles';
import { useEffect, useState } from "react";
import { MockTest, Question } from "../../../auth/AppwriteContext";
import { useSnackbar } from "notistack";
import { LoadingButton } from "@mui/lab";
import { PATH_DASHBOARD } from "../../../routes/paths";

export default function CreateMockTestModel() {
  const searchParams = window.location.search.split('?');
  var id1 = "";
  var id2 = "";
  var id3 = "";
  if(searchParams.length===2) {
    const searchMap = searchParams[1].split('&');
    for(let i=0; i<searchMap.length; i++) {
      const x = searchMap[i].split('=');
      if(x[0] === 'standardId') {
        id1 = x[1]
      } else if(x[0] === 'subjectId') {
        id2 = x[1]
      } else if(x[0] === 'chapterId') {
        id3 = x[1]
      }
    }
  }

  const [mockTestId] = useState("");
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [standard, setStandard] = useState("");
  const [subject, setSubject] = useState("");
  const [chapter, setChapter] = useState("");
  const [concept, setConcept] = useState("");
  const [standardId, setStandardId] = useState(id1);
  const [subjectId, setSubjectId] = useState(id2);
  const [chapterId, setChapterId] = useState(id3);
  const [conceptId, setConceptId] = useState("");
  const [time, setTime] = useState(0);
  const [questionCount, setQuestionCount] = useState(0);

  const [creating, setCreating] = useState(false);

  const [standardList, setStandardList] = useState([]);
  const [subjectList, setSubjectList] = useState([]);
  const [chapterList, setChapterList] = useState([]);
  const [conceptList, setConceptList] = useState([]);

  const [isStandardListLoading, setIsStandardListLoading] = useState(false);
  const [isSubjectListLoading, setIsSubjectListLoading] = useState(false);
  const [isChapterListLoading, setIsChapterListLoading] = useState(false);
  const [isConceptListLoading, setIsConceptListLoading] = useState(false);

  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    const fetchData = async () => {
      if (standardId !== "") {
        const data = await Question.getStandardName(standardId);
        setStandard(data);
      }
      if (subjectId !== "") {
        const data = await Question.getSubjectName(subjectId);
        setSubject(data);
      }
      if (chapterId !== "") {
        const data = await Question.getChapterName(chapterId);
        setChapter(data);
      }
    }
    fetchData()
  })

  const createQuestion = async () => {
    if (standard.length === 0) {
      enqueueSnackbar('Standard cannot be empty', { variant: 'error' });
      return;
    }
    if (subject.length === 0) {
      enqueueSnackbar('Subject cannot be empty', { variant: 'error' });
      return;
    }
    if (chapter.length === 0) {
      enqueueSnackbar('Chapter cannot be empty', { variant: 'error' });
      return;
    }
    if (concept.length === 0) {
      enqueueSnackbar('Concept cannot be empty', { variant: 'error' });
      return;
    }
    if (time <= 0) {
      enqueueSnackbar('Duration cannot less than or equal to 0', { variant: 'error' });
      return;
    }
    if (questionCount <= 0) {
      enqueueSnackbar('Number of Question cannot less than or equal to 0', { variant: 'error' });
      return;
    }
    setCreating(true);
    try {
      const id = await MockTest.createMockTestDriver(standardId, subjectId, chapterId, conceptId, time, questionCount);
      setCreating(false);
      window.location.href = PATH_DASHBOARD.mockTest.list(standardId, subjectId, chapterId, conceptId);
    } catch (error) {
      enqueueSnackbar(error.message, { variant: 'error' })
      setCreating(false);
    }
  }

  return (
    <Paper
      sx={{
        p: 1,
        my: 1,
        minHeight: 120,
        bgcolor: (theme) => alpha(theme.palette.grey[500], 0.12),
      }}
    >
      <Card>
        <CardHeader title="Create a mock-test" subheader="Information enterd here cannot be edited in future. Please enter the data carefully" />
        <CardContent sx={{ mt: 2 }}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={12}>
              <TextField
                fullWidth
                disabled
                value={mockTestId}
                label='ID'
                helperText='ID is automatically generated by the system.'
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <Autocomplete
                fullWidth
                autoComplete
                value={standard}
                loading={isStandardListLoading}
                options={standardList}
                onFocus={async (event, value) => {
                  try {
                    setIsStandardListLoading(true);
                    const tem = await Question.getStandardList(value?.$id ? value?.name : value);
                    setStandardList(tem);
                    setIsStandardListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onInputChange={async (event, value) => {
                  try {
                    setIsStandardListLoading(true);
                    const tem = await Question.getStandardList(value?.$id ? value?.name : value);
                    setStandardList(tem);
                    setIsStandardListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onChange={async (event, value) => {
                  setStandardId(value?.$id)
                  setStandard(value?.name);
                }}
                getOptionLabel={(option) => {
                  if (typeof (option) === 'string') return option;
                  else return option.name || '';
                }}
                renderOption={(props, option, { selected }) => (
                  <li {...props}>
                    {option?.name}
                  </li>
                )}
                renderInput={(params) => (
                  <TextField {...params} label="Standard" />
                )}
                sx={{ mt: 2 }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <Autocomplete
                fullWidth
                autoComplete
                value={subject}
                loading={isSubjectListLoading}
                options={subjectList}
                onFocus={async (event, value) => {
                  try {
                    setIsSubjectListLoading(true);
                    const tem = await Question.getSubjectList(value?.$id ? value?.name : value, standardId);
                    setSubjectList(tem);
                    setIsSubjectListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onInputChange={async (event, value) => {
                  try {
                    setIsSubjectListLoading(true);
                    const tem = await Question.getSubjectList(value?.$id ? value?.name : value, standardId);
                    setSubjectList(tem);
                    setIsSubjectListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onChange={(event, value) => {
                  setSubjectId(value?.$id)
                  setSubject(value?.name);
                }}
                getOptionLabel={(option) => {
                  if (typeof (option) === 'string') return option;
                  else return option.name || '';
                }}
                renderOption={(props, option, { selected }) => (
                  <li {...props}>
                    {option?.name}
                  </li>
                )}
                renderInput={(params) => (
                  <TextField {...params} label="Subject" />
                )}
                sx={{ mt: 2 }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <Autocomplete
                fullWidth
                autoComplete
                value={chapter}
                loading={isChapterListLoading}
                options={chapterList}
                onFocus={async (event, value) => {
                  try {
                    setIsChapterListLoading(true);
                    const tem = await Question.getChapterList(value?.$id ? value?.name : value, standardId, subjectId);
                    setChapterList(tem);
                    setIsChapterListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onInputChange={async (event, value) => {
                  try {
                    setIsChapterListLoading(true);
                    const tem = await Question.getChapterList(value?.$id ? value?.name : value, standardId, subjectId);
                    setChapterList(tem);
                    setIsChapterListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onChange={(event, value) => {
                  setChapterId(value?.$id)
                  setChapter(value?.name);
                }}
                getOptionLabel={(option) => {
                  if (typeof (option) === 'string') return option;
                  else return option.name || '';
                }}
                renderOption={(props, option, { selected }) => (
                  <li {...props}>
                    {option?.name}
                  </li>
                )}
                renderInput={(params) => (
                  <TextField {...params} label="Chapter" />
                )}
                sx={{ mt: 2 }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <Autocomplete
                fullWidth
                autoComplete
                value={concept}
                loading={isConceptListLoading}
                options={conceptList}
                onFocus={async (event, value) => {
                  try {
                    setIsConceptListLoading(true);
                    const tem = await Question.getConceptList(value?.$id ? value?.name : value, standardId, subjectId, chapterId);
                    setConceptList(tem);
                    setIsConceptListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onInputChange={async (event, value) => {
                  try {
                    setIsConceptListLoading(true);
                    const tem = await Question.getConceptList(value?.$id ? value?.name : value, standardId, subjectId, chapterId);
                    setChapterList(tem);
                    setIsConceptListLoading(false);
                  } catch (error) {
                    console.log(error);
                  }
                }}
                onChange={(event, value) => {
                  setConceptId(value?.$id)
                  setConcept(value?.name);
                }}
                getOptionLabel={(option) => {
                  if (typeof (option) === 'string') return option;
                  else return option.name || '';
                }}
                renderOption={(props, option, { selected }) => (
                  <li {...props}>
                    {option?.name}
                  </li>
                )}
                renderInput={(params) => (
                  <TextField {...params} label="Concept" />
                )}
                sx={{ mt: 2 }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <TextField
                fullWidth
                value={time}
                label='Duration'
                type="number"
                helperText='Number of minutes as duration of test.'
                onChange={(event) => {
                  setTime(event.target.value);
                }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <TextField
                fullWidth
                value={questionCount}
                label='No Of Questions'
                type="number"
                helperText='Number of questions in one test.'
                onChange={(event) => {
                  setQuestionCount(event.target.value);
                }}
              />
            </Grid>

            <Grid item xs={12} md={12}>
              <LoadingButton
                variant="contained"
                fullWidth
                onClick={createQuestion}
                loading={creating}
              >
                Create
              </LoadingButton>
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </Paper>
  )
}